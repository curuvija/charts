version: '3'

env:
  GITHUB_REPO: charts
  CLUSTER_NAME: test-helm-chart-cluster
  SOURCE_DIR: source

tasks:
  new:
    desc: creates new helm chart out of starter chart
    requires:
      vars:
        - HELM_CHART_NAME
    cmds:
      - helm create $HELM_CHART_NAME --starter $(pwd)/$SOURCE_DIR/starter && mv $HELM_CHART_NAME $SOURCE_DIR
  commitlint:
    desc: run commitlint
    cmds:
      - npx commitlint --from HEAD~1 --to HEAD --verbose
  lint:
    desc: run linters on Helm chart
    requires:
      vars: 
        - HELM_CHART_NAME
    cmds:
      - helm lint $SOURCE_DIR/$HELM_CHART_NAME
      #- helm template $SOURCE_DIR/$HELM_CHART_NAME | kubeval
  docs:
    desc: renders docs
    requires:
      vars: 
        - HELM_CHART_NAME
    cmds:
      - helm-docs --chart-search-root $SOURCE_DIR/$HELM_CHART_NAME/
  tests:
    desc: test helm chart
    requires:
      vars: 
        - HELM_CHART_NAME # name of the helm chart
        - RELEASE_NAME # helm release name
    cmds:
      - echo "Running tests for $HELM_CHART_NAME in folder tests/$HELM_CHART_NAME."
      - cd tests/$HELM_CHART_NAME && ls -la && go test ./...
  tests.integration:
    desc: test helm chart with integrations tests
    # TODO: this doesn't work
    vars:
      HELM_CHART_PATH:
        sh: echo $(pwd)/$SOURCE_DIR/$HELM_CHART_NAME
    requires:
      vars: 
        - HELM_CHART_NAME # name of the helm chart
        - HELM_CHART_PATH # absolute path to the helm chart
        - RELEASE_NAME # helm release name
    cmds:
      - task: cluster.create
      - task: kubecontext
      - defer: { task: cluster.delete }
      - |
        export HELM_CHART_PATH=$(pwd)/$SOURCE_DIR/$HELM_CHART_NAME
        export RELEASE_NAME=$HELM_CHART_NAME
        echo "executing integration tests for helm chart $HELM_CHART_NAME in $HELM_CHART_PATH."
        cd tests/$HELM_CHART_NAME && go test --tags=integration
  package:
    desc: package helm chart with command like "HELM_CHART_PATH=$SOURCE_DIR/query-exporter/query-exporter task package"
    requires:
      vars: 
        - HELM_CHART_NAME
    cmds:
      - helm package $SOURCE_DIR/$HELM_CHART_NAME --destination build/ --destination .cr-release-packages/
      # TODO: - cr package $CHART_PATH --sign
  upload:
    desc: upload packaged helm chart to github repository releases page
    prompt: You are about to publish helm charts to charts repository... Do you want to continue?
    requires:
      vars:
        - GH_TOKEN
    cmds:
      - git checkout gh-pages
      - cr upload -o curuvija --git-repo $GITHUB_REPO --package-path .cr-release-packages/ --token $GH_TOKEN --release-notes-file $SOURCE_DIR/$HELM_CHART_NAME/CHANGELOG.md
      - cr upload -o curuvija --git-repo $GITHUB_REPO --package-path .cr-release-packages/ --token $GH_TOKEN --release-notes-file $SOURCE_DIR/$HELM_CHART_NAME/CHANGELOG.md
  release:
    desc: release helm chart
    cmds:
      - task: lint
      - task: golden
      - task: tests
      - task: docs
      - task: appVersion
      - task: package
      - task: version
      - task: diff
      - task: pr #--yes # check https://taskfile.dev/usage/#warning-prompts
      - task: commit
      - task: upload
      # TODO: check if you can have a webhook event created when PR is approved so that you can release the version to github pages https://stackoverflow.com/questions/56706424/github-api-does-a-webhook-fire-on-a-pull-request-approval-event
  infer:
    desc: nyx summary
    cmds:
      - nyx infer --summary --configuration-file=$SOURCE_DIR/$HELM_CHART_NAME/nyx.yaml #--bump=minor #--release-prefix=$HELM_CHART_NAME-
  mark:
    desc: mark nyx
    cmds:
      - nyx mark
  make:
    desc: make nyx
    cmds:
      - nyx make --configuration-file=$SOURCE_DIR/$HELM_CHART_NAME/nyx.yaml #--bump=minor #--release-prefix=$HELM_CHART_NAME- #--substitutions-chartyaml-files=**$SOURCE_DIR/$HELM_CHART_NAME/Chart.yaml
      #- task: appVersion
  publish:
    desc: publish nyx
    cmds:
      - nyx publish
  version:
    desc: version helm chart
    cmds:
      - echo "versioning helm chart"
  diff:
    desc: display git diff
    cmds:
      - git --no-pager diff
      - echo "this git tag will be created"
  pr:
    desc: display changes imitating PR/MR
    prompt: By approving these changes you're going to publish release... Do you want to continue?
    cmds:
      - echo "creating release tag"
      - echo "commiting and creating PR"
  commit:
    desc: commit 
    cmds:
      - echo "creating release tag"
      - echo "commiting and creating PR (or even approve)"
  appVersion:
    desc: replaces appVersion in Helm chart
    requires:
      vars:
        - HELM_CHART_NAME
    cmds:
      - export APP_VERSION=$(cat $SOURCE_DIR/$HELM_CHART_NAME/values.yaml | yq .image.tag) && yq e -i '.appVersion = env(APP_VERSION)' $SOURCE_DIR/$HELM_CHART_NAME/Chart.yaml
  golden:
    desc: update golden files
    requires:
      vars: 
        - HELM_CHART_NAME
    cmds:
      - |
        echo "working on chart $HELM_CHART_NAME"
        for file in tests/$HELM_CHART_NAME/values/*; do
          echo "working on file $($file)"
          helm template $SOURCE_DIR/$HELM_CHART_NAME -n default --values $file > tests/$HELM_CHART_NAME/golden/$(basename $file)
        done
  cluster.create:
    desc: creates cluster for the lab
    requires:
      vars: 
        - CLUSTER_NAME
    cmds:
    - kind create cluster --config config/cluster.yaml --name $CLUSTER_NAME
  cluster.delete:
    desc: deletes the cluster for the lab
    requires:
      vars: 
        - CLUSTER_NAME
    cmds:
    - kind delete cluster --name $CLUSTER_NAME
  kubecontext:
    desc: select kubernetes kubecontext
    requires:
      vars: 
        - CLUSTER_NAME
    cmds:
    - kubectl config use-context kind-$CLUSTER_NAME
  up:
    desc: Install lab
    cmds:
    - task: cluster.create
    - task: kubecontext
    - task: helmfile
  down:
    desc: remove lab
    cmds:
    - task: cluster.delete
  helmfile:
    desc: helmfile
    cmds:
      - helmfile -f config/helmfile.yaml sync
  kube-score:
    desc: Run kube-score on templates
    cmds:
      - helm template $SOURCE_DIR/$HELM_CHART_NAME | docker run -i zegl/kube-score:latest score -
  kube-linter:
    desc: run kube-linter
    cmds:
      - helm template $SOURCE_DIR/$HELM_CHART_NAME | docker run --pull missing -i stackrox/kube-linter:latest lint -
  polaris:
    desc: run polaris against helm chart, check https://github.com/FairwindsOps/polaris/blob/master/examples/config.yaml for config options
    cmds:
      - task: golden
      - docker run -t -v $(pwd)/tests/$HELM_CHART_NAME/golden:/templates quay.io/fairwinds/polaris:latest polaris audit --only-show-failed-tests --format=pretty --audit-path /templates
  trivy:
    desc: run trivy against helm chart
    cmds:
      - docker run -t -v $(pwd)/$SOURCE_DIR/$HELM_CHART_NAME:/chart aquasec/trivy:latest config /chart
  kubesec:
    desc: scan with https://kubesec.io/
    cmds:
      - helm template $SOURCE_DIR/$HELM_CHART_NAME | docker run -i kubesec/kubesec:latest scan /dev/stdin
  kics:
    desc: run kics on helm chart
    cmds:
      - docker run -t -v $SOURCE_DIR/$HELM_CHART_NAME:/chart checkmarx/kics:latest scan -p /chart/$HELM_CHART_NAME
  kubeaudit:
    desc: kubeaudit scan manifests
    cmds:
    # IMPORTANT: kubeaudit docker image latest comes only for arm64 https://hub.docker.com/r/shopify/kubeaudit/tags so you need to use binary release instead
    #- docker run -t -v $(pwd)/tests/$HELM_CHART_NAME/golden:/templates shopify/kubeaudit:latest all -f /templates
    # TODO: check if you can use nix-shell or download binaries
    #- wget -q https://github.com/Shopify/kubeaudit/releases/download/v0.22.1/kubeaudit_0.22.1_linux_amd64.tar.gz && tar -zxvf kubeaudit_0.22.1_linux_amd64.tar.gz kubeaudit && mv kubeaudit /usr/local/bin/
    #- task: golden
    #- kubeaudit all -f tests/$HELM_CHART_NAME/golden
  # TODO: check https://github.com/bridgecrewio/checkov/blob/main/docs/7.Scan%20Examples/Helm.md
  kubescape:
    desc: run kubescape scan (check https://github.com/kubescape/kubescape/blob/master/docs/getting-started.md#run-your-first-scan)
    cmds:
      - docker run -t -v $(pwd)/tests/$HELM_CHART_NAME/golden:/templates --name kubescape bitnami/kubescape:latest scan /templates
  checkov:
    desc: run checkouv on helm chart
    cmds:
      - docker run -t -v $(pwd)/$SOURCE_DIR/$HELM_CHART_NAME:/chart bridgecrew/checkov:latest -d /chart
  cnspec:
    desc: run cnspec on golden files
    cmds:
      - docker run -t -v $(pwd)/$SOURCE_DIR/$HELM_CHART_NAME:/templates -v $(pwd)/config/cnspec:/policies mondoo/cnspec scan k8s /templates --policy-bundle /policies/mondoo-kubernetes-best-practices.mql.yaml
  pluto:
    desc: detect deprecated api versions
    cmds:
    - pluto detect tests/$HELM_CHART_NAME/golden
  conftest:
    desc: run conftest
    cmds:
    - conftest test --policy config/conftest/ tests/$HELM_CHART_NAME/golden
  kubeconform:
    desc: run kubeconform
    cmds:
    - kubeconform tests/$HELM_CHART_NAME/golden
  kyverno:
    desc: kyverno scan
    cmds:
    #- kyverno apply config/kyverno/ --resource=tests/$HELM_CHART_NAME/golden
    - docker run -e KYVERNO_NAMESPACE="kyverno-system" -e KYVERNO_SERVICEACCOUNT_NAME="nobody" -v $(pwd)/config/kyverno:/policies -v $(pwd)/tests/$HELM_CHART_NAME/golden:/templates ghcr.io/kyverno/kyverno apply /policies --resource=/templates
  terrascan:
    desc: scanning kubernetes yaml files
    cmds:
      - docker run -v $(pwd)/tests/$HELM_CHART_NAME/golden:/templates accurics/terrascan:latest scan -i k8s --iac-dir /templates
  hooks:
    desc: runs all pre-commit hooks on demand
    cmds:
      - pre-commit run --all-files